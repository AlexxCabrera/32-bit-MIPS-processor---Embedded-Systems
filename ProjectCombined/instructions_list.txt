//r-type instructions
01158027 //nor $s0, $t0, $s5
0211482a //slt $t1, $s0, $s1
0230502a //slt $t2, $s1, $s0
01290020 //add $0 , $t1, $t1
02095822 //sub $t3, $s0, $t1
01306022 //sub $t4, $t1, $s

//i-types
21300002 //addi $s0, $t1, 2
360b0000 //ori  $t3, $s0, 0
320b0006 //andi $t3, $s0, 6
ad700000 //sw   $s0, 0($t3)
8d6c0000 //lw   $t4, 0($t3)

/*Branch not equal instruction*/
15090001 //   bne  $t0, $t1, b
21480004 //   addi $t0, $t2, 4
21300002 //b: addi $s0, $t1, 2

/*Branch instruction*/
21480005 //   addi $t0, $t2, 5
21490005 //   addi $t1, $t2, 5
11090001 //   beq  $t0, $t1, b
21480004 //   addi $t0, $t2, 4
21300002 //b: addi $s0, $t1, 2

/*jal instruction*/
21480005 //   addi $t0, $t2, 5
0C000004 //   jal b
21480004 //   addi $t0, $t2, 4
21300002 //b: addi $s0, $t1, 2
//0000 0011 1110 0000 0000 0000 0000 1000
03E00008 // jr $ra

//jr 
21480005 //   addi $t0, $t2, 5
0C000001 //   jal b
21480004 //   addi $t0, $t2, 4
21300002 //b: addi $s0, $t1, 2

//jump
21480005 //   addi $t0, $t2, 5
08000001 //   j b
21480004 //   addi $t0, $t2, 4
21300002 //b: addi $s0, $t1, 2

//loop

20000000 //1.       addi $s0, $zero,0
0C000004 //2.       jal  FUN
0800000B //3.       j    EXIT
21080000 //4.   FUN:addi $t0, $t0, 0
2129000a //5.       addi $t1, $t1, 0
11090002 //6.  LOOP:beq  $t0, $t1, END
21080001 //7.       addi $t0, $t0, 1
08000006 //8.       j    LOOP
21100000 //9.   END:addi $s0, $t0, 0
03E00008 //10       jr   $ra
         //11. EXIT: 

//test
//21280001 //addi $t0, $t1, 1 
//21110003 //addi $s1, $t0, 4
21280001 //addi $t0, $t1, 1
01098824 //and $s1, $t0, $t1
01099025 //or $s2, $t0, $t1
